// свойство arguments - оно содержит в массиве список всех значений, с которыми вызвана функция.

// function foo() { return arguments; }

// foo(); // []
// foo(1, 2, 3); // [1, 2, 3]
// foo(‘Hello’, ‘By-by’); // [‘Hello’, ‘By-by’]
// foo( {car: ‘Lexus’, price: 64000} ); // [ {car: ‘Lexus’, price: 64000} ]


// Задание 1
// Написать функцию, которая принимает два параметра и складывает их.
// Предусмотреть проверку на тип данных. Если хоть один из параметров не является числом, должно выводиться ообщение об ошибке. Также обраьботайте случай, если не было введено два параметра.
const log = console.log;
const mySum = function (num1, num2) {
    if (arguments.length !== 2){
        alert("Введите два параметра")
    } else if(typeof num1 !== 'number' || typeof num2 !== 'number'){
        alert("Введенные данные не являяются числами");
    } else {
        log("Все работает");
        log(num1 + num2);
    }
}

mySum(4, 2);


// Примеры результатов вызова функции:
// sum(2,4); // 6
// sum('d',4); // введенные данные не являются числами
// sum(1, [2]); // введенные данные не являются числами
// sum(1); // введите два параметра
// sum(); // введите два параметра


// Задание 2
// Измените функцию "square" так, чтобы в случае ее вызова без аргумента генерировалась консольная ошибка
// "Функция "square" не может быть вызвана без аргумента"

// function square(a) {
//   console.log(a * a)
// }
// square(10) // 100

// square()
// // ДО: NaN
// // ПОСЛЕ: Uncaught Error: Функция "square" не может быть вызвана без аргумента
function square(a){
    if(arguments.length === 0){
        log(NaN);
        console.error("Функция \"square\" не может быть вызвана без аргумента");
    } else {
        log(a * a);
    }
}
square();


// Задание 3
// Создать функцию "угадай число". Она принимает число от 1 до 10 (обязательно проверить, что число не больше 10 и не меньше 0). Генерирует рандомное число от 1 до 10 и сравнивает с заданным числом.
// Если они совпали, то возвращает “Вы выиграли”, если нет - то “Вы не угадали, ваше число -  ...,  а выпало число ...”
// Функция создания случайного числа уже была ранее в материалах, в задаче по созданию случайного цвета.
// Написать функцию в стрелочном синтаксисе.
const guessNum = (number) => {
    let num = getRandomInteger(1, 10);
    if (number >= 0 && number <= 10){
        if (num === number){
            log("Вы выиграли");
        } else {
            log(`Вы не угадали, ваше число - ${number},  а выпало число ${num}`);
        }
    }
}
function getRandomInteger(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
}

guessNum(5);


// Задание 4
// Определить массив, например let arr = [5, 4, 3, 8, 0];
// Создать функцию filterFor(arr, a). Функция должна вернуть новый массив из элементов arr, но в нем должны содержаться элементы, которые больше или равны (>=) значения переменной a.
// Например, запуск функции filterFor(arr, 5) дает результат [5,8]
// запуск функции filterFor(arr, 10) дает результат []
// запуск функции filterFor(arr, 3.11) дает результат [4,5,8]
let arr = [5, 4, 3, 8, 0];
const filterFor = (arr, a) => {
    let newArr = [];
    for (let i = 0; i < arr.length; i++){
        if (arr[i] >= a){
            newArr.push(arr[i]);
        }
    }
    console.log(newArr);
}
filterFor(arr, 10);

// Задание 5
// Напишите функцию copyArr(arr), которая копирует массив, не изменяя оригинал. Используйте подходящий метод массива.
const copyArr = (arr) => {
    const arrCopy = arr.slice(0, arr.length);
    log(arrCopy);
}
copyArr(arr);

// Задание 6
// Создайте функцию sumObjectValues, которая будет суммировать все значения свойств, которые являются числами. Сумму чисел необходимо вернуть из функции.
// Проверить работу функции можно на объекте:
const objectWithNumbers = {
  a: 10,
  b: 20,
  c: 'string',
  d: 12,
}
const sumObjectValues = (object) =>{
    let sum = 0;
    for (const key in object){
        if (typeof object[key] === 'number'){
            sum += object[key];
        }
    }
    return sum;
}

log(sumObjectValues(objectWithNumbers));